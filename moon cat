local b = bit32
local function xorStr(s, k)
    local o = {}
    for i = 1, #s do
        o[i] = string.char(b.bxor(string.byte(s, i), k))
    end
    return table.concat(o)
end

local fakeCode = "print('⚠ Script Protected ⚠')"

local function secureLoad(code)
    local env = getfenv()
    local blocker = {
        print = function() return "⚠ Dump Blocked ⚠" end,
        warn = function() return "⚠ Dump Blocked ⚠" end,
    }
    setfenv(loadstring(" "), setmetatable({}, {
        __index = function(_, k) return blocker[k] or env[k] end
    }))
    return loadstring(code)()
end

local data = {
    { "\108\111\99\97\108\32\87\111\114\107\115\112\97\99\101", 77 },
    { "\108\111\99\97\108\32\80\108\97\121\101\114\115", 55 },
    { "\108\111\99\97\108\32\112\108\97\121\101\114", 123 },
    { "\115\99\114\101\101\110\71\117\105", 91 },
    { "\102\114\97\109\101", 66 },
    { "\116\101\120\116\76\97\98\101\108", 88 },
    { "\105\109\112\111\114\116\97\110\116\97\110\116\99\111\100\101", 77 },
    { "\116\97\115\107\46\100\101\108\97\121", 55 },
    { "\105\109\112\111\114\116\97\110\116\98\97\99\107", 123 },
}

local order = {1, 2, 3, 4, 5, 6, 7, 8, 9}
local final = {}
for _, i in ipairs(order) do
    local enc, key = data[i][1], data[i][2]
    table.insert(final, xorStr(enc, key))
end
table.insert(final, math.random() > 0.5 and fakeCode or "")

local layer1 = table.concat(final)
local layer2 = xorStr(layer1, 123)
local layer3 = xorStr(layer2, 77)

secureLoad(xorStr(xorStr(layer3, 77), 123))
