local b = bit32
local function xorStr(s,k)
    local o = {}
    for i = 1,#s do
        o[i] = string.char(b.bxor(string.byte(s,i),k))
    end
    return table.concat(o)
end

local fakeCode = "print('⚠ Script Protected ⚠')"

local function secureLoad(code)
    local env = getfenv()
    local blocker = {
        print = function() return "⚠ Dump Blocked ⚠" end,
        warn = function() return "⚠ Dump Blocked ⚠" end,
    }
    setfenv(loadstring(" "), setmetatable({}, {
        __index = function(_,k) return blocker[k] or env[k] end
    }))
    return loadstring(code)()
end

local data = {
    { "\61\12\58\40\32\23\45\16\17\24\33\11\29\46\50\13\42\20\18\51\48\20\43\31\36", 77 },
    { "\18\29\24\33\44\55\23\20\12\31\19\28\24\33\16\29\30\44\12\18\27", 123 },
    { "\49\39\32\25\17\12\48\16\33\27\41\12\31\28\35\14\22\33\44\11\39", 91 },
}

local order = {2,1,3}
local final = {}
for _,i in ipairs(order) do
    local enc,key = data[i][1], data[i][2]
    table.insert(final, xorStr(enc,key))
end
table.insert(final, math.random()>0.5 and fakeCode or "")

local layer1 = table.concat(final)
local layer2 = xorStr(layer1, 123)
local layer3 = xorStr(layer2, 77)

secureLoad(xorStr(xorStr(layer3,77),123))
