--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

--// Variables
local targetPartName = "HumanoidRootPart" -- ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
local trackingEnabled = false

--// GUI (ŸÖÿÆÿ™ÿµÿ± ŸÑÿ•ŸÜŸá ŸÜŸÅÿ≥ ÿßŸÑÿ≥ÿßÿ®ŸÇ)
local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame", ScreenGui)
MainFrame.Size = UDim2.new(0, 200, 0, 100)
MainFrame.Position = UDim2.new(0.3, 0, 0.3, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(50,50,50)
MainFrame.Active = true
MainFrame.Draggable = true

local PartDropdown = Instance.new("TextButton", MainFrame)
PartDropdown.Size = UDim2.new(0,180,0,30)
PartDropdown.Position = UDim2.new(0,10,0,10)
PartDropdown.Text = "ÿßÿÆÿ™ÿ± ÿßŸÑÿ¨ÿ≤ÿ°"
PartDropdown.BackgroundColor3 = Color3.fromRGB(255,0,0)
local PartOptions = {"Head","HumanoidRootPart","UpperTorso","LowerTorso"}
local PartSelected = "HumanoidRootPart"

PartDropdown.MouseButton1Click:Connect(function()
    PartSelected = PartOptions[(table.find(PartOptions,PartSelected) % #PartOptions)+1]
    PartDropdown.Text = PartSelected
end)

local TrackToggle = Instance.new("TextButton", MainFrame)
TrackToggle.Size = UDim2.new(0,180,0,30)
TrackToggle.Position = UDim2.new(0,10,0,50)
TrackToggle.Text = "ÿ™ÿ™ÿ®ÿπ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß"
TrackToggle.BackgroundColor3 = Color3.fromRGB(255,0,0)

TrackToggle.MouseButton1Click:Connect(function()
    trackingEnabled = not trackingEnabled
    TrackToggle.BackgroundColor3 = trackingEnabled and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
end)

local RainbowButton = Instance.new("TextButton", ScreenGui)
RainbowButton.Size = UDim2.new(0,50,0,30)
RainbowButton.Position = UDim2.new(0,10,0,10)
RainbowButton.Text = "üåà"
RainbowButton.BackgroundColor3 = Color3.fromRGB(255,0,255)

RainbowButton.MouseButton1Click:Connect(function()
    MainFrame.Visible = not MainFrame.Visible
end)

-- Function: Get closest player
local function getClosestPlayer()
    local closest = nil
    local shortestDistance = math.huge
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(PartSelected) then
            local part = player.Character[PartSelected]
            local distance = (part.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closest = player
            end
        end
    end
    return closest
end

-- Function: Check visibility
local function isVisible(part)
    local origin = Camera.CFrame.Position
    local direction = (part.Position - origin).Unit * (part.Position - origin).Magnitude
    local ray = Ray.new(origin,direction)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray,{LocalPlayer.Character})
    return hit and hit:IsDescendantOf(part.Parent)
end

-- Update Loop
RunService.RenderStepped:Connect(function()
    if trackingEnabled then
        local targetPlayer = getClosestPlayer()
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild(PartSelected) then
            local part = targetPlayer.Character[PartSelected]

            -- Set color
            for _, p in pairs(targetPlayer.Character:GetDescendants()) do
                if p:IsA("BasePart") then
                    if isVisible(part) then
                        p.Color = Color3.fromRGB(0,255,0)
                        p.Transparency = 0.3
                    else
                        p.Color = Color3.fromRGB(255,0,0)
                        p.Transparency = 0
                    end
                end
            end

            -- Follow part with camera without moving local player
            if isVisible(part) then
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, part.Position)
            end
        end
    end
end)
